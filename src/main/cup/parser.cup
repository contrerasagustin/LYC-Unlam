package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.symbol_table.*;
import lyc.compiler.symbol_table.Symbol;
import java.util.List;
import java.util.ArrayList;
import lyc.compiler.polacaInversa.*;

class Parser;

action code
{:
     public SymbolTableManager symbolTableManager = new SymbolTableManager();
     public ArrayList<String> identifiersList = new ArrayList();
     public PolacaInversaManager polacaInversa = new PolacaInversaManager();


:}
parser code
{:
    public List<Symbol> getSymbolList() {
    return action_obj.symbolTableManager.getSymbolList();
    }
:}

// Terminals
//RESERVED WORDS
terminal IF;
terminal ELSE;
terminal FOR;
terminal BEGIN;
terminal END;
terminal EQUAL;
terminal INIT;
terminal WRITE;
terminal READ;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal WHILE;
terminal SWITCH;
terminal CASE;
terminal DEFAULT;
terminal ALLEQUAL;
terminal REPEAT;


//OPERATORS
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal HIGHER;
terminal LOWER;
terminal HIGHER_EQUAL;
terminal LOWER_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal DISTINCT;
terminal INCREMENT;
terminal DECREMENT;

//BOOLEANOS
terminal TRUE_BOOL;
terminal FALSE_BOOL;

//MARKS
terminal COMMA;
terminal TWODOTS;
terminal SEMICOLON;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;

//CONSTANTS
terminal INTEGER_CONSTANT, FLOAT_CONSTANT, STRING_CONSTANT;

terminal IDENTIFIER;

// Non Terminals
non terminal program;
non terminal block;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal sentence;
non terminal conditional;
non terminal condition;
non terminal operator;
non terminal write_content;
non terminal declaration_block;
non terminal declaration;
non terminal type;
non terminal name_list;
non terminal name;
non terminal initialization;
non terminal constant;
non terminal cases;
non terminal cases_block;
non terminal defaults;
non terminal component_list;
non terminal component;
non terminal subcomponent_list;
non terminal subcomponent;

// Start Symbol Definition
start with program;

program ::= block  {:System.out.println("End");  polacaInversa.mostrar(); :};
block ::= block sentence;
block ::= sentence;


sentence ::= assignment SEMICOLON{: System.out.println("Assignment"); :};

assignment ::= IDENTIFIER:id ASSIG expression {:
    System.out.println("Assignment");
    polacaInversa.insertar(id.toString());
    polacaInversa.insertar(":=");
  :};
expression ::= expression PLUS term {:
    System.out.println("+");
    polacaInversa.insertar("+");
:};
expression ::= expression SUB term {:
    System.out.println("-");
    polacaInversa.insertar("-");
 :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {:
    System.out.println("*");
    polacaInversa.insertar("*");
 :};
term ::= term DIV factor {:
    System.out.println("/");
    polacaInversa.insertar("/");
 :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {:
    System.out.println("Id: " + id);
    polacaInversa.insertar(id.toString());
 :};
factor ::= constant {: System.out.println("constante"); :};
constant    ::= INTEGER_CONSTANT:intConstant
            {:
            symbolTableManager.add("_"+intConstant, null, intConstant.toString(), null);
            polacaInversa.insertar(intConstant.toString());
            System.out.println("Constant int: " + intConstant );
            :};
constant    ::= FLOAT_CONSTANT:floatConstant
            {:
            symbolTableManager.add("_"+floatConstant, null, floatConstant.toString(), null);
            polacaInversa.insertar(floatConstant.toString());
             System.out.println("Constant float: " + floatConstant );
            :};
constant    ::= STRING_CONSTANT:stringConstant
            {:
            final String str = stringConstant.toString().replace("\"", "");
            polacaInversa.insertar(str);
            symbolTableManager.addStringConstant(null, str, str.length());
            System.out.println("Constant string: " + stringConstant );
            :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

sentence ::= IF conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("if");
    polacaInversa.insertar("UNSTACK");:};
sentence ::= IF conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("if");
    polacaInversa.insertar("UNSTACK");
  :};
conditional ::= OPEN_BRACKET condition AND condition CLOSE_BRACKET {: System.out.println("and conditional"); :};
conditional ::= OPEN_BRACKET condition OR condition CLOSE_BRACKET {: System.out.println("or conditional"); :};
conditional ::= OPEN_BRACKET NOT condition CLOSE_BRACKET {: System.out.println("single conditional  not"); :};
conditional ::= OPEN_BRACKET condition CLOSE_BRACKET {: System.out.println("single conditional"); :};

condition ::= factor EQUAL factor {:
    polacaInversa.insertar("==");
    polacaInversa.insertar("BNE");
    System.out.println("condition");
 :};

condition ::= factor DISTINCT factor {:
    polacaInversa.insertar("!=");
    polacaInversa.insertar("BEQ");
    System.out.println("condition");
 :};

condition ::= factor HIGHER factor {:
    polacaInversa.insertar(">>");
    polacaInversa.insertar("BLE");
    System.out.println("condition");
 :};

condition ::= factor HIGHER_EQUAL factor {:
    polacaInversa.insertar(">=");
    polacaInversa.insertar("BLS");
    System.out.println("condition");
 :};

 condition ::= factor LOWER factor {:
    polacaInversa.insertar("<");
    polacaInversa.insertar("BHE");
    System.out.println("condition");
  :};

  condition ::= factor LOWER_EQUAL factor {:
    polacaInversa.insertar("<=");
    polacaInversa.insertar("BHG");
    System.out.println("condition");
  :};

//
sentence ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET SEMICOLON{:
            polacaInversa.insertar(id.toString());
            polacaInversa.insertar("WRITE");
            System.out.println("write " + id);
 :};
sentence ::= WRITE OPEN_BRACKET STRING_CONSTANT:stringConstant CLOSE_BRACKET SEMICOLON{:
            final String str = stringConstant.toString().replace("\"", "");
            polacaInversa.insertar(str);
            polacaInversa.insertar("WRITE");
            symbolTableManager.addStringConstant(null, str, str.length());
            System.out.println("write: " + stringConstant );
 :};

//
sentence ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET SEMICOLON{:
            polacaInversa.insertar(id.toString());
            polacaInversa.insertar("READ");
            System.out.println("read");
 :};
sentence ::= READ OPEN_BRACKET STRING_CONSTANT:stringConstant  CLOSE_BRACKET SEMICOLON{:
            final String str = stringConstant.toString().replace("\"", "");
            polacaInversa.insertar(str);
            polacaInversa.insertar("READ");
            symbolTableManager.addStringConstant(null, str, str.length());
            System.out.println("read: " + stringConstant );
 :};


sentence ::= initialization{: System.out.println("initialization"); :};
initialization ::= INIT OPEN_CURLY_BRACKET declaration_block CLOSE_CURLY_BRACKET{: System.out.println("init"); :};
declaration_block ::= declaration_block declaration;
declaration_block ::= declaration;
declaration ::= name_list TWODOTS type SEMICOLON{: System.out.println("declaration"); :};
name_list ::= name_list COMMA name;
name_list ::= name;
name        ::= IDENTIFIER:id
            {:
            this.identifiersList.add(id.toString());
            polacaInversa.insertar(id.toString());
            System.out.println("Id: " + id);
            :};

type        ::= INT
            {:
            symbolTableManager.addIdentifiers(this.identifiersList, DataType.INTEGER);
            System.out.println("int");
            :};
type        ::= FLOAT
            {:
            symbolTableManager.addIdentifiers(this.identifiersList, DataType.FLOAT);
            System.out.println("float");
            :};
type ::= STRING
            {:
            symbolTableManager.addIdentifiers(this.identifiersList, DataType.STRING);
            System.out.println("string");
            :};
sentence ::= WHILE conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{:
    System.out.println("while");
    polacaInversa.insertar("JMP");
    polacaInversa.insertar("UNSTACK");:};

sentence ::= SWITCH OPEN_BRACKET IDENTIFIER CLOSE_BRACKET OPEN_CURLY_BRACKET cases_block CLOSE_CURLY_BRACKET {: System.out.println("switch"); :};
cases_block ::= cases_block cases;
cases_block ::= cases;
cases ::= CASE constant TWODOTS OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET{: System.out.println("case"); :};
cases ::= CASE constant TWODOTS OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET defaults {: System.out.println("case"); :};
defaults ::= DEFAULT TWODOTS OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("case"); :};
//
sentence ::= ALLEQUAL OPEN_BRACKET component_list CLOSE_BRACKET SEMICOLON {: System.out.println("allequal"); :};
component_list ::= component_list COMMA component;
component_list ::= component;
component ::= OPEN_SQUARE_BRACKET subcomponent_list CLOSE_SQUARE_BRACKET{: System.out.println("component"); :};
subcomponent_list ::= subcomponent_list COMMA subcomponent;
subcomponent_list ::= subcomponent;
subcomponent ::= expression;

//
sentence ::= REPEAT INTEGER_CONSTANT OPEN_BRACKET block CLOSE_BRACKET SEMICOLON{: System.out.println("repeat inline"); :};